```sql
SELECT column, another_column, â€¦
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC
LIMIT num_limit OFFSET num_offset;

BETWEEN token
Query items based on a range of values
select * from <table> where <field> between <value1> and <value2>;
select * from <table> where <field> not between <value1> and <value2>;

EX.
select * from movies where year between 2000 and 2010;
select * from movies where year not between 2000 and 2010;

IN token:
Query items based on a list
select * from <table> where <field> in (value1, value2, ...);
select * from <table> where <field> not in (value1, value2, ...);

EX.
select * from movies where id in (1,3,5)
select * from movies where id not in (1,3,5)

QUERIES WITH CONSTRAINTS

'=' Case sensitive string equality
'LIKE' case insensitive string equality
'!=' or '<>' Case sensitive string not equality
'not like' case insensitive string inequality
'%' zero or more character wild card
'_' one or more character wild card 
'IN' String exists in a list                            string IN ('A', 'B', 'C')
'NOT IN' String is not in a list                        string NOT IN ('A', 'B', 'C')


EX)
Find all Toy Story Movies
select * from movies where Title like 'Toy Story%';

FILTERING QUERIES)

DISTINCT token
Remove duplicate entries of <field1>, <field2>, ...
select DISTINCT <field1>, <field2>, ..., from <table>;

LIMIT token
To only return the first <number> of rows for the query.
select * from <table> limit <number>

EX)
select * from movies order by year desc limit 4;

OFFSET token
Coupled with the limit token, decides where the query starts to display the rows.
select * from <table> limit <number> offset <offset number>

EX)
select * from movies order by title limit 5 offset 5;
```
